#lang racket/base

; Signature: (append l1 l2)
; Type:l1 is a list, l2 is a list
; Purpose: append l2 to l1
; Pre-conditions: none
; Tests: (append '(1 2 3) '(4 5 6)) => '(1 2 3 4 5 6)
(define append
    (lambda (l1 l2)
    (if (null? l1) l2 (cons (car l1) (append (cdr l1) l2)))
))

; Signature: (reverse l)
; Type:l is a list
; Purpose: reverse a list
; Pre-conditions: none
; Tests: (reverse '(1 2 3)) => '(3 2 1)
(define reverse
    (lambda (l)
    (if (null? l) 
        '() 
        (append (reverse (cdr l)) (list (car l))))
))


; Signature:(len l)
; Type: l is a list
; Purpose: return the length of the list
; Pre-conditions:
; Tests:(len '(1 4 5 2)) => 4
(define len
    (lambda (l) 
    (if(null? l)
        0
        (+ 1 (len(cdr l)))
    )
))


; Signature:(duplicate-item item count)
; Type:item:T count:number
; Purpose: return a list with the item count times
; Pre-conditions:number >=0
; Tests:((duplicate-item 5 3)) => '(5 5 5)
(define duplicate-item 
    (lambda (item count)
    (if(<= count 0)
        '()
        (cons item (duplicate-item item (- count 1)))
    )
))




(define duplicate-help
    (lambda (lst dup-count indx)
        (if (null? lst) 
        '()
        (append (duplicate-item (car lst) (????)) (duplicate-help (cdr lst) dup-count (+ indx 1))))  
))

; Signature:
; Type:
; Purpose:
; Pre-conditions:
; Tests:
(define duplicate-items
    (lambda (lst dup-count)
        (duplicate-help lst dup-count 0)
))
